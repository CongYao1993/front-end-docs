import{_ as n,c as s,o as a,e}from"./app-CCtMo5dT.js";const p="/front-end-docs/assets/lcp-example-1-xAoWWp9Q.png",l="/front-end-docs/assets/lcp-example-2-yyjdvySK.png",t="/front-end-docs/assets/performance-api-BE6yc1kO.png",i={},c=e('<h2 id="_1-性能优化介绍" tabindex="-1"><a class="header-anchor" href="#_1-性能优化介绍"><span>1. 性能优化介绍</span></a></h2><h3 id="_1-1-什么是-web-性能" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-web-性能"><span>1.1 什么是 Web 性能</span></a></h3><p>MDN 定义：Web 性能是网站或应用程序的客观度量和可感知的用户体验。</p><p>简单来说就是网站够不够快，包括渲染（打开速度、动画效果、页面切换等）和交互（表单提交、列表滚动等）。</p><h3 id="_1-2-为什么要关注-web-性能" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么要关注-web-性能"><span>1.2 为什么要关注 Web 性能</span></a></h3><ul><li>用户的留存</li><li>网站的转化率</li><li>体验与传播</li><li>搜索排名</li><li>客户投诉</li><li>提升工作绩效</li></ul><h3 id="_1-3-如何进行-web-性能优化" tabindex="-1"><a class="header-anchor" href="#_1-3-如何进行-web-性能优化"><span>1.3 如何进行 Web 性能优化</span></a></h3><ol><li>首先需要了解性能指标（多快才算快？）；</li><li>使用专业的工具可量化地评估出网站或应用的性能表现；</li><li>然后立足于网站页面响应的生命周期，分析出造成较差性能表现的原因；</li><li>最后进行技术改造、可行性分析等具体的优化实施；</li><li>迭代优化。</li></ol><h2 id="_2-web-性能指标" tabindex="-1"><a class="header-anchor" href="#_2-web-性能指标"><span>2. Web 性能指标</span></a></h2><p><a href="https://web.dev/articles/user-centric-performance-metrics?hl=zh-cn" target="_blank" rel="noopener noreferrer">web.dev</a></p><p><a href="https://developer.chrome.com/docs/lighthouse/overview?hl=zh-cn" target="_blank" rel="noopener noreferrer">Chrome Lighthouse</a></p><table><thead><tr><th>颜色编码</th><th>FCP 时间/s</th><th>LCP 时间/s</th><th>TBT/ms</th></tr></thead><tbody><tr><td>绿色（快速）</td><td>0 - 1.8</td><td>0 - 2.5</td><td>0 - 200</td></tr><tr><td>橙色（中等）</td><td>1.8 - 3</td><td>2.5 - 4</td><td>200 - 600</td></tr><tr><td>红色（慢）</td><td>超过 3</td><td>超过 4</td><td>超过 600</td></tr></tbody></table><h3 id="_2-1-first-contentful-paint-fcp" tabindex="-1"><a class="header-anchor" href="#_2-1-first-contentful-paint-fcp"><span>2.1 First Contentful Paint (FCP)</span></a></h3><p>首次内容绘制 (FCP) 指从用户首次导航到网页，到网页内容的任何部分在屏幕上呈现的时间。</p><p>“内容”是指文本、图片（包括背景图片）、<code>&lt;svg&gt;</code> 元素或非白色 <code>&lt;canvas&gt;</code> 元素。如果有启动画面或加载中图标，会影响 FCP。</p><h3 id="_2-2-largest-contentful-paint-lcp" tabindex="-1"><a class="header-anchor" href="#_2-2-largest-contentful-paint-lcp"><span>2.2 Largest Contentful Paint (LCP)</span></a></h3><p>最大内容绘制 (LCP) 指视口中可见的最大图片、文本块或视频的呈现时间。粗略地估算出网页主要内容何时对用户可见。</p><p>LCP 会考虑以下因素：</p><ul><li><code>&lt;img&gt;</code> 元素</li><li><code>&lt;svg&gt;</code> 元素内的 <code>&lt;image&gt;</code> 元素</li><li><code>&lt;video&gt;</code> 元素（使用封面图加载时间或视频的第一帧呈现时间，以两者中较早达到者为准）</li><li>此元素包含使用 url() 函数加载的背景图片</li><li>包含文本节点或其它内嵌级文本元素子级的块级元素</li></ul><img src="'+p+'" width="70%"><img src="'+l+`" width="70%"><h3 id="_2-3-first-meaningful-paint-fmp" tabindex="-1"><a class="header-anchor" href="#_2-3-first-meaningful-paint-fmp"><span>2.3 First Meaningful Paint (FMP)</span></a></h3><p>首次有效绘制 (FMP) 是指从用户启动网页加载到呈现<strong>主要首屏内容</strong>的网页之间间隔的时间。</p><h3 id="_2-4-time-to-interactive-tti" tabindex="-1"><a class="header-anchor" href="#_2-4-time-to-interactive-tti"><span>2.4 Time to Interactive (TTI)</span></a></h3><p>可交互时间 (TTI) 是指网页实现完全可交互所需的时间。完全可交互是指：</p><ul><li>网页会显示有用内容，内容的衡量依据是 FCP，</li><li>大多数可见页面元素都会注册事件处理脚本，并且</li><li>网页会在 50 毫秒内响应用户互动。</li></ul><h3 id="_2-5-total-blocking-time-tbt" tabindex="-1"><a class="header-anchor" href="#_2-5-total-blocking-time-tbt"><span>2.5 Total Blocking Time (TBT)</span></a></h3><p>总阻塞时间 (TBT) 是指网页被禁止响应用户输入（例如鼠标点击、屏幕点按或键盘按下操作）的总时长。</p><h3 id="_2-6-cumulative-layout-shift-cls" tabindex="-1"><a class="header-anchor" href="#_2-6-cumulative-layout-shift-cls"><span>2.6 Cumulative Layout Shift (CLS)</span></a></h3><p>累计布局偏移 (CLS) 是指在页面整个生命周期内发生的每次意外布局偏移的分数的总和。它是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</p><h3 id="_2-7-speed-index" tabindex="-1"><a class="header-anchor" href="#_2-7-speed-index"><span>2.7 Speed Index</span></a></h3><p>速度指数用于衡量在网页加载期间内容直观地显示的速度。 Lighthouse 首先会在浏览器中拍摄一段网页加载视频，并计算帧之间的视觉进度。</p><h2 id="_3-web-性能测试" tabindex="-1"><a class="header-anchor" href="#_3-web-性能测试"><span>3. Web 性能测试</span></a></h2><h3 id="_3-1-window-performance" tabindex="-1"><a class="header-anchor" href="#_3-1-window-performance"><span>3.1 window.performance</span></a></h3><p>Performance 用于获取当前页面中与性能相关的信息。可以通过 <code>window.performance</code> 访问窗口中运行的代码的性能信息。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">performance <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// memory 是非标准属性，只在 Chrome 有</span></span>
<span class="line">  <span class="token literal-property property">memory</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize</span></span>
<span class="line">    <span class="token literal-property property">usedJSHeapSize</span><span class="token operator">:</span> <span class="token number">16100000</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 可使用的内存</span></span>
<span class="line">    <span class="token literal-property property">totalJSHeapSize</span><span class="token operator">:</span> <span class="token number">35100000</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 内存大小限制</span></span>
<span class="line">    <span class="token literal-property property">jsHeapSizeLimit</span><span class="token operator">:</span> <span class="token number">793000000</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token literal-property property">navigation</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果有重定向的话，页面通过几次重定向跳转而来</span></span>
<span class="line">    <span class="token literal-property property">redirectCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）</span></span>
<span class="line">    <span class="token comment">// 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面</span></span>
<span class="line">    <span class="token comment">// 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）</span></span>
<span class="line">    <span class="token comment">// 255 即 TYPE_UNDEFINED    非以上方式进入的页面</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token literal-property property">timing</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</span></span>
<span class="line">    <span class="token literal-property property">navigationStart</span><span class="token operator">:</span> <span class="token number">1441112691935</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</span></span>
<span class="line">    <span class="token literal-property property">unloadEventStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</span></span>
<span class="line">    <span class="token literal-property property">unloadEventEnd</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</span></span>
<span class="line">    <span class="token literal-property property">redirectStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0</span></span>
<span class="line">    <span class="token literal-property property">redirectEnd</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</span></span>
<span class="line">    <span class="token literal-property property">fetchStart</span><span class="token operator">:</span> <span class="token number">1441112692155</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>
<span class="line">    <span class="token literal-property property">domainLookupStart</span><span class="token operator">:</span> <span class="token number">1441112692155</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>
<span class="line">    <span class="token literal-property property">domainLookupEnd</span><span class="token operator">:</span> <span class="token number">1441112692155</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等</span></span>
<span class="line">    <span class="token comment">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span></span>
<span class="line">    <span class="token literal-property property">connectStart</span><span class="token operator">:</span> <span class="token number">1441112692155</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等</span></span>
<span class="line">    <span class="token comment">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span></span>
<span class="line">    <span class="token comment">// 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过</span></span>
<span class="line">    <span class="token literal-property property">connectEnd</span><span class="token operator">:</span> <span class="token number">1441112692155</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTPS 连接开始的时间，如果不是安全连接，则值为 0</span></span>
<span class="line">    <span class="token literal-property property">secureConnectionStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span></span>
<span class="line">    <span class="token comment">// 连接错误重连时，这里显示的也是新建立连接的时间</span></span>
<span class="line">    <span class="token literal-property property">requestStart</span><span class="token operator">:</span> <span class="token number">1441112692158</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span></span>
<span class="line">    <span class="token literal-property property">responseStart</span><span class="token operator">:</span> <span class="token number">1441112692686</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span></span>
<span class="line">    <span class="token literal-property property">responseEnd</span><span class="token operator">:</span> <span class="token number">1441112692687</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</span></span>
<span class="line">    <span class="token literal-property property">domLoading</span><span class="token operator">:</span> <span class="token number">1441112692690</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</span></span>
<span class="line">    <span class="token comment">// 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</span></span>
<span class="line">    <span class="token literal-property property">domInteractive</span><span class="token operator">:</span> <span class="token number">1441112693093</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DOM 解析完成后，网页内资源加载开始的时间</span></span>
<span class="line">    <span class="token comment">// 在 DOMContentLoaded 事件抛出前发生</span></span>
<span class="line">    <span class="token literal-property property">domContentLoadedEventStart</span><span class="token operator">:</span> <span class="token number">1441112693093</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></span>
<span class="line">    <span class="token literal-property property">domContentLoadedEventEnd</span><span class="token operator">:</span> <span class="token number">1441112693101</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</span></span>
<span class="line">    <span class="token literal-property property">domComplete</span><span class="token operator">:</span> <span class="token number">1441112693214</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// load 事件发送给文档，也即 load 回调函数开始执行的时间</span></span>
<span class="line">    <span class="token comment">// 注意如果没有绑定 load 事件，值为 0</span></span>
<span class="line">    <span class="token literal-property property">loadEventStart</span><span class="token operator">:</span> <span class="token number">1441112693214</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// load 事件的回调函数执行完毕的时间</span></span>
<span class="line">    <span class="token literal-property property">loadEventEnd</span><span class="token operator">:</span> <span class="token number">1441112693215</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个流程如下：</p><ol><li>上一个文档卸载</li><li>重定向</li><li>浏览器准备好使用 http 抓取文档</li><li>检查本地缓存</li><li>查询 DNS 域名</li><li>TCP 建立连接</li><li>HTTP 请求、响应</li><li>渲染 DOM 树并解析</li><li>网页开始加载资源</li><li>准备就绪触发 load 事件执行回调函数</li></ol><img src="`+t+`"><p>统计页面性能指标的方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> performance <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>performance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 当前浏览器不支持</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;你的浏览器不支持 performance 接口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 页面从开始导航到加载完成所用的时间，代表了用户等待页面可用的时间</span></span>
<span class="line">times<span class="token punctuation">.</span>loadPage <span class="token operator">=</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 卸载页面的时间</span></span>
<span class="line">times<span class="token punctuation">.</span>unloadEvent <span class="token operator">=</span> t<span class="token punctuation">.</span>unloadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>unloadEventStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 重定向耗时</span></span>
<span class="line">times<span class="token punctuation">.</span>redirect <span class="token operator">=</span> t<span class="token punctuation">.</span>redirectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>redirectStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// DNS 缓存时间</span></span>
<span class="line">times<span class="token punctuation">.</span>appcache <span class="token operator">=</span> t<span class="token punctuation">.</span>domainLookupStart <span class="token operator">-</span> t<span class="token punctuation">.</span>fetchStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// DNS 解析耗时</span></span>
<span class="line"><span class="token comment">// DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？</span></span>
<span class="line"><span class="token comment">// 可使用 HTML5 Prefetch 预查询 DNS ，[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)</span></span>
<span class="line">times<span class="token punctuation">.</span>lookupDomain <span class="token operator">=</span> t<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>domainLookupStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// TCP 建立连接完成握手的时间</span></span>
<span class="line">times<span class="token punctuation">.</span>connect <span class="token operator">=</span> t<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>connectStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 读取页面第一个字节的时间 Time To First Byte (TTFB)</span></span>
<span class="line"><span class="token comment">// 可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？</span></span>
<span class="line">times<span class="token punctuation">.</span>ttfb <span class="token operator">=</span> t<span class="token punctuation">.</span>responseStart <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 内容加载完成的时间</span></span>
<span class="line"><span class="token comment">// 页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？</span></span>
<span class="line">times<span class="token punctuation">.</span>request <span class="token operator">=</span> t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>requestStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 解析 DOM 树结构的时间，判断 DOM 树嵌套是不是太多了</span></span>
<span class="line">times<span class="token punctuation">.</span>domReady <span class="token operator">=</span> t<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> t<span class="token punctuation">.</span>responseEnd<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 执行 onload 回调函数的时间</span></span>
<span class="line"><span class="token comment">// 是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？</span></span>
<span class="line">times<span class="token punctuation">.</span>loadEvent <span class="token operator">=</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>loadEventStart<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-lighthouse" tabindex="-1"><a class="header-anchor" href="#_3-2-lighthouse"><span>3.2 LightHouse</span></a></h3>`,42),o=[c];function r(d,u){return a(),s("div",null,o)}const v=n(i,[["render",r],["__file","前端性能优化.html.vue"]]),k=JSON.parse('{"path":"/tutorial/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 性能优化介绍","slug":"_1-性能优化介绍","link":"#_1-性能优化介绍","children":[{"level":3,"title":"1.1 什么是 Web 性能","slug":"_1-1-什么是-web-性能","link":"#_1-1-什么是-web-性能","children":[]},{"level":3,"title":"1.2 为什么要关注 Web 性能","slug":"_1-2-为什么要关注-web-性能","link":"#_1-2-为什么要关注-web-性能","children":[]},{"level":3,"title":"1.3 如何进行 Web 性能优化","slug":"_1-3-如何进行-web-性能优化","link":"#_1-3-如何进行-web-性能优化","children":[]}]},{"level":2,"title":"2. Web 性能指标","slug":"_2-web-性能指标","link":"#_2-web-性能指标","children":[{"level":3,"title":"2.1 First Contentful Paint (FCP)","slug":"_2-1-first-contentful-paint-fcp","link":"#_2-1-first-contentful-paint-fcp","children":[]},{"level":3,"title":"2.2 Largest Contentful Paint (LCP)","slug":"_2-2-largest-contentful-paint-lcp","link":"#_2-2-largest-contentful-paint-lcp","children":[]},{"level":3,"title":"2.3 First Meaningful Paint (FMP)","slug":"_2-3-first-meaningful-paint-fmp","link":"#_2-3-first-meaningful-paint-fmp","children":[]},{"level":3,"title":"2.4 Time to Interactive (TTI)","slug":"_2-4-time-to-interactive-tti","link":"#_2-4-time-to-interactive-tti","children":[]},{"level":3,"title":"2.5 Total Blocking Time (TBT)","slug":"_2-5-total-blocking-time-tbt","link":"#_2-5-total-blocking-time-tbt","children":[]},{"level":3,"title":"2.6 Cumulative Layout Shift (CLS)","slug":"_2-6-cumulative-layout-shift-cls","link":"#_2-6-cumulative-layout-shift-cls","children":[]},{"level":3,"title":"2.7 Speed Index","slug":"_2-7-speed-index","link":"#_2-7-speed-index","children":[]}]},{"level":2,"title":"3. Web 性能测试","slug":"_3-web-性能测试","link":"#_3-web-性能测试","children":[{"level":3,"title":"3.1 window.performance","slug":"_3-1-window-performance","link":"#_3-1-window-performance","children":[]},{"level":3,"title":"3.2 LightHouse","slug":"_3-2-lighthouse","link":"#_3-2-lighthouse","children":[]}]}],"git":{"updatedTime":1729051394000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"tutorial/前端性能优化.md"}');export{v as comp,k as data};
