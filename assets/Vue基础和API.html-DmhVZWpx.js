import{_ as t,c as e,o as a,e as n}from"./app-CCtMo5dT.js";const l={},s=n(`<h2 id="_1-data-为什么是一个函数而不是对象" tabindex="-1"><a class="header-anchor" href="#_1-data-为什么是一个函数而不是对象"><span>1. data 为什么是一个函数而不是对象</span></a></h2><p>一个组件的 data 选项必须是一个函数，每个新创建的组件实例都可以维护一份被返回对象的独立的拷贝。</p><p>如果 data 是一个对象，则所有的实例将共享引用同一个数据对象，多个实例之间会互相影响。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;button-counter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me {{ count }} times.&lt;/button&gt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-v-if-和-v-show-的区别" tabindex="-1"><a class="header-anchor" href="#_2-v-if-和-v-show-的区别"><span>2. v-if 和 v-show 的区别</span></a></h2><p>v-if 和 v-show 均是有条件地渲染内容。</p><p>v-if：</p><ul><li>v-if 是惰性的，如果初始条件为假，则什么也不做，条件为真时，才开始渲染条件块</li><li>v-if 是真正的条件渲染，在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建</li><li>v-if 有更高的切换开销，适合运行时条件很少改变的元素</li></ul><p>v-show：</p><ul><li>v-show 是通过设置 CSS 样式的 display 属性进行切换</li><li>无论初始条件是什么，元素总会被渲染，只是简单的基于 CSS 切换</li><li>v-show 有更高的初始渲染开销，适合频繁切换的元素</li></ul><h2 id="_3-v-for-和-v-if-的优先级" tabindex="-1"><a class="header-anchor" href="#_3-v-for-和-v-if-的优先级"><span>3. v-for 和 v-if 的优先级</span></a></h2><p>当 v-if 和 v-for 同时存在于一个元素上的时候，</p><ul><li>Vue2 中，v-for 具有更高的优先级</li><li>Vue3 中，v-if 会首先被执行</li></ul><p>不推荐同时使用 v-if 和 v-for。</p><h2 id="_4-v-model-的实现原理" tabindex="-1"><a class="header-anchor" href="#_4-v-model-的实现原理"><span>4. v-model 的实现原理</span></a></h2><h3 id="_4-1-表单元素的-v-model" tabindex="-1"><a class="header-anchor" href="#_4-1-表单元素的-v-model"><span>4.1 表单元素的 v-model</span></a></h3><p>通过 v-bind 绑定数据，通过 v-on 来监听数据变化并修改 value。</p><p>不同元素绑定不同的属性，监听不同事件。</p><ul><li><code>text</code> 和 <code>textarea</code>：使用 <code>value</code> 属性和 <code>input</code> 事件；</li><li><code>checkbox</code> 和 <code>radio</code>：使用 <code>checked</code> 属性和 <code>change</code> 事件；</li><li><code>select</code>：使用 <code>value</code> 属性和 <code>change</code> 事件。</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token comment">&lt;!-- 约等于 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>$event：当前触发的事件对象</li><li>$event.target：当前触发的事件对象的 DOM</li><li>$event.target.value：当前 DOM 的 value 值</li></ul><h3 id="_4-2-自定义组件的-v-model" tabindex="-1"><a class="header-anchor" href="#_4-2-自定义组件的-v-model"><span>4.2 自定义组件的 v-model</span></a></h3><p>本质上是一个父子组件通信的语法糖，通过 <code>props</code> 和 <code>$emit</code> 实现。</p><h2 id="_5-computed-和-watch-的区别" tabindex="-1"><a class="header-anchor" href="#_5-computed-和-watch-的区别"><span>5. computed 和 watch 的区别</span></a></h2><p><strong>computed：</strong> 通过对已有的属性值进行计算得到一个新值。</p><ul><li>computed 属性值会被缓存，只有它们的响应式依赖（data 或 props 中的数据）发生改变时才会重新计算。</li><li>如果 computed 需要消耗时间，会阻塞渲染，不建议执行开销较大的操作。</li><li>不支持异步，当 computed 中有异步操作时，无法监听数据的变化。</li></ul><p><strong>watch：</strong> 监听数据的变化做一些操作。</p><ul><li>无缓存性，每当监听的数据变化时就会执行回调函数。</li><li>支持异步操作。</li><li>不应该使用箭头函数来定义 watcher 函数，箭头函数的 this 将不会指向 Vue 实例。</li></ul><p>回调的对象可以有两个参数：</p><ul><li>immediate: true 组件加载立即触发回调函数</li><li>deep：深度监听，发现数据内部的变化，否则只能观察对象地址的变化</li></ul><p>watch 观察数组时，以下两种方式的修改监测不到：</p><ul><li>当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ul><h2 id="_6-vue-的生命周期" tabindex="-1"><a class="header-anchor" href="#_6-vue-的生命周期"><span>6. Vue 的生命周期</span></a></h2><p>Vue 实例的生命周期是指从开始创建、初始化数据、编译模版、挂载 DOM -&gt; 渲染、更新 -&gt; 渲染、卸载等⼀系列过程。</p><table><thead><tr><th>阶段</th><th>Vue2 生命周期</th><th>Vue3 生命周期</th><th>说明</th><th>应用</th></tr></thead><tbody><tr><td>创建前</td><td>beforeCreate</td><td>-</td><td>初始化事件和生命周期钩子函数</td><td>可以处理加载的 Loading</td></tr><tr><td>创建后</td><td>created</td><td>-</td><td>实例创建完成，可以访问 data、computed、watch、methods 上的数据方法</td><td>可以发起服务器请求</td></tr><tr><td>挂载前</td><td>beforeMount</td><td>onBeforeMount()</td><td>说在挂载开始之前被调用，相关的 render 函数首次被调用</td><td>-</td></tr><tr><td>挂载后</td><td>mounted</td><td>onMounted()</td><td>Vue 实例已经挂载完毕，</td><td>可以操作 DOM</td></tr><tr><td>更新前</td><td>beforeUpdate</td><td>onBeforeUpdate()</td><td>在数据发生改变后，DOM 被更新之前被调用</td><td>比如移除手动添加的事件监听器</td></tr><tr><td>更新后</td><td>updated</td><td>onUpdated()</td><td>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用</td><td>重新渲染后的打点、性能监测等</td></tr><tr><td>销毁前</td><td>beforeDestory</td><td>onBeforeUnmount()</td><td>实例销毁前调，此时实例仍然完全可用，this 仍能获取到实例用</td><td>清理事件、清理计时器、取消订阅操作等</td></tr><tr><td>销毁后</td><td>destoryed</td><td>onUnmounted()</td><td>说实例销毁后调用，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</td><td>-</td></tr><tr><td>激活时</td><td>activated</td><td>onActivated()</td><td>被 keep-alive 缓存的组件激活时调用</td><td>重新 observe DOM 等</td></tr><tr><td>失活时</td><td>deactivated</td><td>onDeactivated()</td><td>被 keep-alive 缓存的组件失活时调用</td><td>-</td></tr></tbody></table><p>注意：</p><ul><li>只有 beforeCreate 和 created 在 SSR 可用。</li><li>推荐在 created 中调用异步请求，一是能更快获取到服务端数据，二是 SSR 只支持 created。</li><li>mounted 和 updated 不会保证所有的子组件也都被挂载或重新渲染完毕，可能根据异步数据生成 DOM，但是异步数据还没获取到，此时可以考虑 nextTick。</li><li>在大多数情况下，应该避免在 updated 更改数据，因为这可能会导致更新无限循环，可以用 watch 监测数据变化。</li><li>如果为一个组件包裹了 keep-alive，那么它会多出两个生命周期：activated、deactivated。同时，beforeDestroy 和 destroyed 就不会再被触发了，因为组件不会被真正销毁。</li></ul><h2 id="_7-vue-父子组件生命周期钩子函数的执行顺序" tabindex="-1"><a class="header-anchor" href="#_7-vue-父子组件生命周期钩子函数的执行顺序"><span>7. Vue 父子组件生命周期钩子函数的执行顺序</span></a></h2><p>加载渲染过程：</p><ol><li>父组件 beforeCreate</li><li>父组件 created</li><li>父组件 beforeMount</li><li>子组件 beforeCreate</li><li>子组件 created</li><li>子组件 beforeMount</li><li>子组件 mounted</li><li>父组件 mounted</li></ol><p>更新过程：</p><ol><li>父组件 beforeUpdate</li><li>子组件 beforeUpdate</li><li>子组件 updated</li><li>父组件 updated</li></ol><p>销毁过程：</p><ol><li>父组件 beforeDestroy</li><li>子组件 beforeDestroy</li><li>子组件 destroyed</li><li>父组件 destoryed</li></ol><h2 id="_8-vue-组件通信的方式" tabindex="-1"><a class="header-anchor" href="#_8-vue-组件通信的方式"><span>8. Vue 组件通信的方式</span></a></h2><ul><li><code>props</code> / <code>$emit</code><ul><li>父组件通过 props 向子组件传递数据</li><li>父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据</li></ul></li><li><code>$refs</code> / <code>$root</code> / <code>$parent</code><ul><li>父组件通过 $refs 获取子组件实例，可以访问子组件的数据和方法</li><li>子组件通过 $root 获得根组件实例，可以访问根组件的数据和方法 - 子组件通过 $parent 获得父组件实例，可以访问父组件的数据和方法</li></ul></li><li><code>provide</code> / <code>inject</code><ul><li>在父组件中通过 provide 提供变量，在子组件中通过 inject 来将变量注入到组件中 <ul><li>子组件层数很深的情况下，可以使用这种方法来进行传值，避免一层一层传递。</li><li>在 Vue 2 中，provide / inject 不是响应式的，通常使用回调函数可以实现响应式，而在 Vue 3 中，默认是响应式的</li></ul></li></ul></li><li><code>$attrs</code> / <code>$listeners</code><ul><li>v-bind=&quot;$attrs&quot; 传递父组件的属性</li><li>v-on=&quot;$listeners&quot; 传递父组件的事件监听器和事件修饰符</li><li>组件二次封装时使用</li></ul></li><li><code>eventBus</code> 事件总线 <ul><li>它的本质是通过创建一个空的 Vue 实例来作为事件中心，通信的组件通过在这个实例上发送事件 $emit 和接收事件 $on 来实现消息的传递。</li><li>耦合性较强，如果业务逻辑复杂，后期维护困难。</li></ul></li><li><code>vuex</code><ul><li>将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</li></ul></li></ul><h2 id="_9-混入-mixin-的规则" tabindex="-1"><a class="header-anchor" href="#_9-混入-mixin-的规则"><span>9. 混入 mixin 的规则</span></a></h2><p>混入可以分发组件中可复用逻辑。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码。</p><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行合并。</p><ul><li>data 发生冲突时以当前组件数据优先；</li><li>值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取当前组件对象的键值对；</li><li>同名钩子函数将合并为一个数组，因此都将被调用。混入对象的钩子将在组件自身钩子之前调用。</li></ul><ol><li>混入 beforeCreate</li><li>组件 beforeCreate</li><li>混入 created</li><li>组件 created</li><li>混入 beforeMount</li><li>组件 beforeMount</li><li>混入 mounted</li><li>组件 mounted</li></ol>`,51),i=[s];function o(d,p){return a(),e("div",null,i)}const u=t(l,[["render",o],["__file","Vue基础和API.html.vue"]]),r=JSON.parse('{"path":"/interview/Vue/Vue%E5%9F%BA%E7%A1%80%E5%92%8CAPI.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. data 为什么是一个函数而不是对象","slug":"_1-data-为什么是一个函数而不是对象","link":"#_1-data-为什么是一个函数而不是对象","children":[]},{"level":2,"title":"2. v-if 和 v-show 的区别","slug":"_2-v-if-和-v-show-的区别","link":"#_2-v-if-和-v-show-的区别","children":[]},{"level":2,"title":"3. v-for 和 v-if 的优先级","slug":"_3-v-for-和-v-if-的优先级","link":"#_3-v-for-和-v-if-的优先级","children":[]},{"level":2,"title":"4. v-model 的实现原理","slug":"_4-v-model-的实现原理","link":"#_4-v-model-的实现原理","children":[{"level":3,"title":"4.1 表单元素的 v-model","slug":"_4-1-表单元素的-v-model","link":"#_4-1-表单元素的-v-model","children":[]},{"level":3,"title":"4.2 自定义组件的 v-model","slug":"_4-2-自定义组件的-v-model","link":"#_4-2-自定义组件的-v-model","children":[]}]},{"level":2,"title":"5. computed 和 watch 的区别","slug":"_5-computed-和-watch-的区别","link":"#_5-computed-和-watch-的区别","children":[]},{"level":2,"title":"6. Vue 的生命周期","slug":"_6-vue-的生命周期","link":"#_6-vue-的生命周期","children":[]},{"level":2,"title":"7. Vue 父子组件生命周期钩子函数的执行顺序","slug":"_7-vue-父子组件生命周期钩子函数的执行顺序","link":"#_7-vue-父子组件生命周期钩子函数的执行顺序","children":[]},{"level":2,"title":"8. Vue 组件通信的方式","slug":"_8-vue-组件通信的方式","link":"#_8-vue-组件通信的方式","children":[]},{"level":2,"title":"9. 混入 mixin 的规则","slug":"_9-混入-mixin-的规则","link":"#_9-混入-mixin-的规则","children":[]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/Vue/Vue基础和API.md"}');export{u as comp,r as data};
