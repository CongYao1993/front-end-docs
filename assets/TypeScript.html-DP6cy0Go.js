import{_ as n,c as s,o as a,e}from"./app-CCtMo5dT.js";const p={},t=e(`<h2 id="_1-interface-与-type" tabindex="-1"><a class="header-anchor" href="#_1-interface-与-type"><span>1. interface 与 type</span></a></h2><ul><li>interface（接口）：用于定义对象的形状，描述对象应该具有的属性及其类型。</li><li>type (类型别名)：给类型起一个新名字。可以定义一个集合，可以包含各种类型的属性和值，以用来描述对象、函数、联合类型、交叉类型等。</li></ul><p>有的团队规范约定：用 interface 定义一个对象类型，用 type 组合不同类型。</p><p>相同点：</p><h3 id="_1-1-都可以定义一个对象或一个函数" tabindex="-1"><a class="header-anchor" href="#_1-1-都可以定义一个对象或一个函数"><span>1.1 都可以定义一个对象或一个函数</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 测试</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">addType</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>num1<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">num2</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type <span class="token function-variable function">addType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">num2</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 测试</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token function-variable function">addType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-都允许继承" tabindex="-1"><a class="header-anchor" href="#_1-2-都允许继承"><span>1.2 都允许继承</span></a></h3><p>interface 使用 extends 实现继承， type 使用交叉类型实现继承。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 1. interface 的继承</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">grade</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. type 的继承</span></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">type Student <span class="token operator">=</span> Person <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">grade</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 用交叉类型</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. interface 继承 type</span></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">grade</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. type 继承 interface</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type Student <span class="token operator">=</span> Person <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">grade</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 测试</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">grade</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同点：</p><h3 id="_1-3-interface-可以合并重复声明-type-重复声明会报错" tabindex="-1"><a class="header-anchor" href="#_1-3-interface-可以合并重复声明-type-重复声明会报错"><span>1.3 interface 可以合并重复声明，type 重复声明会报错</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 1. interface 可以合并重复声明</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. type 重复声明会报错</span></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Duplicate identifier &#39;Person&#39;</span></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-type-可以声明基本类型、联合类型、交叉类型、元组-interface-不可以" tabindex="-1"><a class="header-anchor" href="#_1-4-type-可以声明基本类型、联合类型、交叉类型、元组-interface-不可以"><span>1.4 type 可以声明基本类型、联合类型、交叉类型、元组，interface 不可以</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">type Name <span class="token operator">=</span> string<span class="token punctuation">;</span> <span class="token comment">// 基本类型</span></span>
<span class="line"></span>
<span class="line">type arrItem <span class="token operator">=</span> number <span class="token operator">|</span> string<span class="token punctuation">;</span> <span class="token comment">// 联合类型</span></span>
<span class="line"></span>
<span class="line">type Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> Name<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">type Student <span class="token operator">=</span> Person <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">grade</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 交叉类型</span></span>
<span class="line"></span>
<span class="line">type Teacher <span class="token operator">=</span> Person <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">major</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">type StudentAndTeacherList <span class="token operator">=</span> <span class="token punctuation">[</span>Student<span class="token punctuation">,</span> Teacher<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元组类型</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">list</span><span class="token operator">:</span> StudentAndTeacherList <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lin&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">grade</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;liu&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token string">&quot;Chinese&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-any-和-unknown-的区别" tabindex="-1"><a class="header-anchor" href="#_2-any-和-unknown-的区别"><span>2. any 和 unknown 的区别</span></a></h2><p>any 用来表示允许赋值为任意类型，表示不再对某个值进行类型检查。</p><ul><li>可以访问任意属性和方法。</li><li>会污染其他变量。它可以赋值给其他任何类型的变量，导致其它变量丢失类型检查。</li><li>变量如果在声明的时候，未指定其类型，那么它会被识别为 any 类型。</li><li>对于开发者没有指定类型、TS 会自己推断类型，如果无法推断出类型，就会认为该变量的类型是 any。</li></ul><p>unknown 表示类型不确定，可能是任意类型，但是它的使用有一些限制，可以视为严格版的 any。</p><ul><li>不能直接调用 unknown 类型变量的方法和属性，需要经过类型缩小才能使用。</li><li>unknown 类型的变量，不能直接赋值给其他类型的变量（除了 any 类型和 unknown 类型）。</li></ul><h2 id="_3-never-和-void-的区别" tabindex="-1"><a class="header-anchor" href="#_3-never-和-void-的区别"><span>3. never 和 void 的区别</span></a></h2><p>never 表示该类型为空，永远不存在的值。</p><ul><li>不可能赋给它任何值，否则都会报错。 即使 any 也不可以赋值给 never。</li><li>一个函数因为报错或者死循环等原因，一直执行不到最后，此时函数返回值是 never。</li><li>如果一个变量为联合类型，通常需要处理每一种类型。这时，处理所有可能的类型之后，剩余的情况就属于 never 类型。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">msg</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">;</span> <span class="token comment">// never 类型</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>void 类型表示没有任何类型。</p><ul><li>没有返回值的函数，其返回值类型为 void。</li><li>void 类型的变量，只能赋予 undefined。</li></ul><h2 id="_4-泛型及其应用场景" tabindex="-1"><a class="header-anchor" href="#_4-泛型及其应用场景"><span>4. 泛型及其应用场景</span></a></h2><p>泛型为类型提供变量。</p><ul><li>泛型函数：通常会编写一个函数，其中输入的类型与输出的类型相关，或者两个输入的类型以某种方式相关。</li><li>在 interface 或 type 上使用泛型</li><li>数组泛型</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 恒等函数</span></span>
<span class="line"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> Type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Type <span class="token operator">=</span> identity<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">}</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 泛型接口</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-keyof-和-typeof-类型运算符" tabindex="-1"><a class="header-anchor" href="#_5-keyof-和-typeof-类型运算符"><span>5. keyof 和 typeof 类型运算符</span></a></h2><p>keyof 运算符采用对象类型并生成其键的字符串或数字字面联合。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">type Point <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">;</span> y<span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">type <span class="token constant">P</span> <span class="token operator">=</span> keyof Point<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 等同于 type P = &quot;x&quot; | &quot;y&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typeof 运算符，获取变量或属性的类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">typeof</span> s<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">type <span class="token constant">P</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 等同于 type P = { x: number; y: number;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-工具类型" tabindex="-1"><a class="header-anchor" href="#_6-工具类型"><span>6. 工具类型</span></a></h2><p><a href="https://ts.nodejs.cn/docs/handbook/utility-types.html" target="_blank" rel="noopener noreferrer">TypeScript 官网-工具类型</a></p><p>从一个类型构造新类型：</p><ul><li><code>Partial&lt;Type&gt;</code>：构造一个将 Type 的所有属性设置为可选的类型。 <ul><li>应用：更新部分属性值</li></ul></li><li><code>Required&lt;Type&gt;</code>：构造一个将 Type 的所有属性设置为 required 的类型。与 Partial 相反。</li><li><code>Readonly&lt;Type&gt;</code>：构造一个将 Type 的所有属性设置为 readonly 的类型。只是浅层不可修改。</li><li><code>Record&lt;Keys, Type&gt;</code>：构造一个对象类型，其属性键为 Keys，其属性值为 Type。</li><li><code>Pick&lt;Type, Keys&gt;</code>：从 Type 中选取一组属性 Keys 来构造一个类型。如果选择的属性值不存在，会报错。</li><li><code>Omit&lt;Type, Keys&gt;</code>：从 Type 中选择所有属性然后删除 Keys 来构造一个类型。与 Pick 相反。 <ul><li>Pick / Omit 的 Keys 必须是字符串或字符串的并集。</li></ul></li><li><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code>：通过从 UnionType 中排除所有可分配给 ExcludedMembers 的联合成员来构造一个类型。</li><li><code>Extract&lt;Type, Union&gt;</code>：通过从 Type 中提取所有可分配给 Union 的联合成员来构造一个类型。 <ul><li>Exclude / Extract 的第二个参数很灵活，可以是描述成员特征的任意类型。</li></ul></li><li><code>NonNullable&lt;Type&gt;</code>：。通过从 Type 中排除 null 和 undefined 来构造一个类型。</li></ul><p>从函数构造类型：</p><ul><li><code>Parameters&lt;Type&gt;</code>：从函数的参数构造元组类型。</li><li><code>ConstructorParameters&lt;Type&gt;</code>：从构造函数的参数构造元组或数组类型。</li><li><code>ReturnType&lt;Type&gt;</code>：构造一个由函数的返回类型组成的类型。</li><li><code>InstanceType&lt;Type&gt;</code>：构造一个由构造函数的实例类型组成的类型。</li></ul>`,41),l=[t];function i(o,c){return a(),s("div",null,l)}const u=n(p,[["render",i],["__file","TypeScript.html.vue"]]),d=JSON.parse('{"path":"/interview/JavaScript/TypeScript.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. interface 与 type","slug":"_1-interface-与-type","link":"#_1-interface-与-type","children":[{"level":3,"title":"1.1 都可以定义一个对象或一个函数","slug":"_1-1-都可以定义一个对象或一个函数","link":"#_1-1-都可以定义一个对象或一个函数","children":[]},{"level":3,"title":"1.2 都允许继承","slug":"_1-2-都允许继承","link":"#_1-2-都允许继承","children":[]},{"level":3,"title":"1.3 interface 可以合并重复声明，type 重复声明会报错","slug":"_1-3-interface-可以合并重复声明-type-重复声明会报错","link":"#_1-3-interface-可以合并重复声明-type-重复声明会报错","children":[]},{"level":3,"title":"1.4 type 可以声明基本类型、联合类型、交叉类型、元组，interface 不可以","slug":"_1-4-type-可以声明基本类型、联合类型、交叉类型、元组-interface-不可以","link":"#_1-4-type-可以声明基本类型、联合类型、交叉类型、元组-interface-不可以","children":[]}]},{"level":2,"title":"2. any 和 unknown 的区别","slug":"_2-any-和-unknown-的区别","link":"#_2-any-和-unknown-的区别","children":[]},{"level":2,"title":"3. never 和 void 的区别","slug":"_3-never-和-void-的区别","link":"#_3-never-和-void-的区别","children":[]},{"level":2,"title":"4. 泛型及其应用场景","slug":"_4-泛型及其应用场景","link":"#_4-泛型及其应用场景","children":[]},{"level":2,"title":"5. keyof 和 typeof 类型运算符","slug":"_5-keyof-和-typeof-类型运算符","link":"#_5-keyof-和-typeof-类型运算符","children":[]},{"level":2,"title":"6. 工具类型","slug":"_6-工具类型","link":"#_6-工具类型","children":[]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/JavaScript/TypeScript.md"}');export{u as comp,d as data};
