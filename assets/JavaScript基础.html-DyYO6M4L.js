import{_ as n,c as s,o as a,e}from"./app-CCtMo5dT.js";const t={},p=e(`<h2 id="_1-js-数据类型及数据类型的判断方式" tabindex="-1"><a class="header-anchor" href="#_1-js-数据类型及数据类型的判断方式"><span>1. JS 数据类型及数据类型的判断方式</span></a></h2><h3 id="_1-1-js-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-1-js-数据类型"><span>1.1 JS 数据类型</span></a></h3><p>JavaScript 共有 8 种数据类型，分别是 <code>undefined</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>、<code>null</code>、<code>Object</code>。前 7 种类型为基础类型，最后 1 种（Object）为引用类型。</p><p>引用数据类型（Object）有几种常见的类型：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code>、<code>Math</code>。</p><ul><li>Symbol：每个从 Symbol() 返回的 symbol 值都是唯一的，可以防止对象的属性名冲突。</li><li>BigInt：可以表示任意大的整数，即使这个数已经超出了 Number 能够表示的安全整数范围（2^53 - 1）。</li></ul><h3 id="_1-2-判断数据类型的方式" tabindex="-1"><a class="header-anchor" href="#_1-2-判断数据类型的方式"><span>1.2 判断数据类型的方式</span></a></h3><ol><li>typeof</li></ol><p><code>typeof 变量名;</code></p><p>可以识别标准类型（null 除外） ，不能识别具体的对象类型（Function 除外）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;，不能判断null</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">1n</span><span class="token punctuation">;</span> <span class="token comment">// &#39;bigint&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;，不能识别具体的对象类型</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;，可以识别function</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>instanceof</li></ol><p><code>变量名 instanceof 类型;</code></p><p>判别内置对象类型、自定义对象类型，不能判别标准类型。给定引用类型的实例则返回 true，检测基本类型值返回 false。</p><p>如果该类型在该变量的原型链上，则为 true。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">foo <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">/</span>\\d<span class="token operator">/</span> <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token operator">/</span>\\d<span class="token operator">/</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>Object.prototype.toString.call()</code></li></ol><p>toString() 是 Object 的原型方法。</p><p>调用该方法返回格式为 &quot;[object Xxx]&quot; 的字符串，其中 Xxx 就是对象的类型，第一个首字母要大写（注意：使用 typeof 返回的是小写）。</p><p>对于 Object 对象，直接调用 toString() 就能返回 [object Object]；而对于其他对象，则需要通过 call 来调用，才能返回正确的类型信息。</p><p>可以识别标准类型以及内置对象类型（函数、数组、Date、正则表达式等） ，不能识别自定义类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Number]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Array]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Object]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object RegExp]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>constructor</code></li></ol><p>对象原型的属性，指向构造器本身。</p><p>识别标准类型（undefined、null 除外）、内置对象类型、自定义对象类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token boolean">true</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;hsg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-如何判断一个数据是否是数组类型" tabindex="-1"><a class="header-anchor" href="#_1-3-如何判断一个数据是否是数组类型"><span>1.3 如何判断一个数据是否是数组类型</span></a></h3><p><code>value instanceof Array</code></p><ul><li>对于一个网页，或者一个全局作用域而言，使用 instanceof 操作符就能得到满意的结果。</li><li>如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数，instanceof 就失效了。</li></ul><p><code>Array.isArray(value)</code></p><ul><li>Array.isArray()方法，这个方法的目的是最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// ES5 之前不支持此方法，做好兼容</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Array]&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-堆和栈的区别" tabindex="-1"><a class="header-anchor" href="#_1-4-堆和栈的区别"><span>1.4 堆和栈的区别</span></a></h3><ul><li>原始数据类型存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据；</li><li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。</li></ul><p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。</p><h2 id="_2-浮点数计算问题-0-1-0-2-为什么不等于-0-3" tabindex="-1"><a class="header-anchor" href="#_2-浮点数计算问题-0-1-0-2-为什么不等于-0-3"><span>2. 浮点数计算问题，0.1 + 0.2 为什么不等于 0.3 ？</span></a></h2><p>浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p><p>使用 JavaScript 提供的最小精度值判断浮点数是否近似相等：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>JavaScript（以及所有现代编程语言）使用的 IEEE-754 浮点表示法是一种<code>二进制表示法</code>，只能精确表示如 1/2、1/8、5/8 等分数，无法精确表示哪怕 0.1 这么简单的数。</p><h2 id="_3-箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_3-箭头函数和普通函数的区别"><span>3. 箭头函数和普通函数的区别</span></a></h2><ul><li>箭头函数没有函数提升：箭头函数属于匿名函数，要通过赋值语句赋值给变量，这个赋值的过程是在代码执行阶段进行的，不是在声明阶段</li><li>箭头函数的 this 指向声明时所在的上下文，普通函数的 this 总是指向调用它的对象</li><li>箭头函数没有原型属性 prototype</li><li>箭头函数不绑定 arguments，可以用扩展运算符...接收参数</li><li>箭头函数不能用于构造函数：不能使用 new 命令，也不具有 new.target 和 super</li><li>不能使用 yield 关键字，因此箭头函数不能用作 Generator 函数</li><li>不能简单返回对象字面量，如果要直接返回对象时需要用小括号包起来，因为大括号被占用解释为代码块了</li></ul><h2 id="_4-for-of-与-for-in-的区别" tabindex="-1"><a class="header-anchor" href="#_4-for-of-与-for-in-的区别"><span>4. for...of 与 for...in 的区别</span></a></h2><p>for...in 和 for...of 语句都用于迭代某个内容，它们之间的主要区别在于迭代的对象。</p><h3 id="_4-1-for-of" tabindex="-1"><a class="header-anchor" href="#_4-1-for-of"><span>4.1 for...of</span></a></h3><p><code>for...of</code> 循环按顺序逐个处理从<code>可迭代对象</code>获取的值。</p><p>可迭代对象包括内置对象的实例，例如 Array、String、TypedArray、Map、Set、NodeList（以及其他 DOM 集合），还包括 arguments 对象、由生成器函数生成的生成器，以及用户定义的可迭代对象。</p><ol><li>首先调用可迭代对象的 <code>[Symbol.iterator]()</code> 方法，该方法返回一个迭代器；</li><li>然后重复调用生成器的 <code>next()</code> 方法，以生成要分配给 variable 的值的序列；</li><li>在迭代器完成时退出 for...of 循环（即迭代器的 next() 方法返回一个包含 <code>done: true</code> 的对象）。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> it <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: 1, done: false}</span></span>
<span class="line">it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: 2, done: false}</span></span>
<span class="line">it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: 3, done: false}</span></span>
<span class="line">it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: undefined, done: true}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-for-in" tabindex="-1"><a class="header-anchor" href="#_4-2-for-in"><span>4.2 for...in</span></a></h3><p><code>for...in</code> 语句用于迭代<code>对象的可枚举字符串属性</code>，包括继承的可枚举属性，不包括 Symbol 属性。</p><p>遍历的顺序是一致且可预测的。在原型链的每个组件中，所有非负整数键（可以作为数组索引）将首先按值升序遍历，然后是其他字符串键按属性创建的先后顺序升序遍历。</p><ol><li>首先获取当前对象的所有自有的字符串键，其方式与 Object.getOwnPropertyNames() 非常相似。</li><li>对于每一个键，如果没有访问过具有相同值的字符串，则获取属性描述符并只访问可枚举的属性。但是，即使该属性不可枚举，也会标记为已访问。</li><li>然后，当前对象被替换为其原型，并重复上述过程。</li></ol><h3 id="_4-3-获取对象本身的属性" tabindex="-1"><a class="header-anchor" href="#_4-3-获取对象本身的属性"><span>4.3 获取对象本身的属性</span></a></h3><p>如果只想迭代对象本身的属性，而不是它的原型，可以使用以下技术之一：</p><ul><li><code>Object.keys()</code>：返回一个包含所有可枚举的自有字符串属性的数组。</li><li><code>Object.getOwnPropertyNames()</code>：包含所有属性，包括不可枚举的。</li></ul><p>判断某个属性是不是对象自身的属性？</p><p><code>Object.hasOwn()</code>：如果指定的对象自身有指定的属性，返回 true。如果属性是继承的或者不存在，返回 false。</p><p>建议使用此方法替代 <code>Object.prototype.hasOwnProperty()</code>，因为它适用于使用 Object.create(null) 创建的对象，以及重写了继承的 hasOwnProperty() 方法的对象。</p>`,58),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","JavaScript基础.html.vue"]]),d=JSON.parse('{"path":"/interview/JavaScript/JavaScript%E5%9F%BA%E7%A1%80.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. JS 数据类型及数据类型的判断方式","slug":"_1-js-数据类型及数据类型的判断方式","link":"#_1-js-数据类型及数据类型的判断方式","children":[{"level":3,"title":"1.1 JS 数据类型","slug":"_1-1-js-数据类型","link":"#_1-1-js-数据类型","children":[]},{"level":3,"title":"1.2 判断数据类型的方式","slug":"_1-2-判断数据类型的方式","link":"#_1-2-判断数据类型的方式","children":[]},{"level":3,"title":"1.3 如何判断一个数据是否是数组类型","slug":"_1-3-如何判断一个数据是否是数组类型","link":"#_1-3-如何判断一个数据是否是数组类型","children":[]},{"level":3,"title":"1.4 堆和栈的区别","slug":"_1-4-堆和栈的区别","link":"#_1-4-堆和栈的区别","children":[]}]},{"level":2,"title":"2. 浮点数计算问题，0.1 + 0.2 为什么不等于 0.3 ？","slug":"_2-浮点数计算问题-0-1-0-2-为什么不等于-0-3","link":"#_2-浮点数计算问题-0-1-0-2-为什么不等于-0-3","children":[]},{"level":2,"title":"3. 箭头函数和普通函数的区别","slug":"_3-箭头函数和普通函数的区别","link":"#_3-箭头函数和普通函数的区别","children":[]},{"level":2,"title":"4. for...of 与 for...in 的区别","slug":"_4-for-of-与-for-in-的区别","link":"#_4-for-of-与-for-in-的区别","children":[{"level":3,"title":"4.1 for...of","slug":"_4-1-for-of","link":"#_4-1-for-of","children":[]},{"level":3,"title":"4.2 for...in","slug":"_4-2-for-in","link":"#_4-2-for-in","children":[]},{"level":3,"title":"4.3 获取对象本身的属性","slug":"_4-3-获取对象本身的属性","link":"#_4-3-获取对象本身的属性","children":[]}]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/JavaScript/JavaScript基础.md"}');export{r as comp,d as data};
