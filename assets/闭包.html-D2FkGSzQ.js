import{_ as p,c as e,a as t,d as n,b as l,w as c,e as s,r as i,o}from"./app-CCtMo5dT.js";const u="/front-end-docs/assets/closure-example-B02DGXb8.jpg",r="/front-end-docs/assets/closure-example-DKTvqczm.png",k={},d=s(`<h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><ul><li>定义：闭包是保存了一个函数定义时所在外部函数的变量的集合，让内部函数总是可以访问外部函数的变量。</li><li>产生方式：外部函数中包含内部函数，或者返回内部函数，都会产生闭包。</li><li>应用：异步操作（事件监听、定时器等）、私有化变量和方法等。</li></ul><h2 id="_1-举个例子理解闭包" tabindex="-1"><a class="header-anchor" href="#_1-举个例子理解闭包"><span>1. 举个例子理解闭包</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener noreferrer">MDN 闭包</a></p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;极客时间&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> innerBar <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> myName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      myName <span class="token operator">=</span> newName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> innerBar<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;极客邦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token comment">// 极客邦</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>执行到 foo 函数内部的 return innerBar 这行代码时调用栈的情况；</li><li>foo 函数执行完成之后，其执行上下文从栈顶弹出了，但是由于返回的 setName 和 getName 方法中使用了 foo 函数内部的变量 myName 和 test1，所以这两个变量依然保存在内存中。无论在哪里调用了 setName 和 getName 方法，它们都会背着这个 foo 函数的专属背包，称为 foo 函数的闭包。</li><li>当执行到 bar.setName 方法中的 myName = &quot;极客邦&quot; 这句代码时，JavaScript 引擎会沿着“当前执行上下文–&gt; foo 函数闭包–&gt; 全局执行上下文”的顺序来查找 myName 变量。</li></ol><p><img src="`+u+'" alt="image.jpg"></p><h2 id="_2-闭包的产生和定义" tabindex="-1"><a class="header-anchor" href="#_2-闭包的产生和定义"><span>2. 闭包的产生和定义</span></a></h2>',9),v=s(`<p>闭包（closure）是一个函数定义所在的外部函数的变量的组合，让内部函数总是可以访问外部函数的变量。</p><p>在 JavaScript 中，闭包会随着函数的创建而被同时创建。</p><ol><li>外部函数包含内部函数，将产生一个闭包。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Mozilla&quot;</span><span class="token punctuation">;</span> <span class="token comment">// name 是一个被 init 创建的局部变量</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用了父函数中声明的变量，将产生一个闭包</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图分别执行到 var name = &quot;Mozilla&quot;; 执行到 displayName(); 执行到 alert(name);</p><p><img src="`+r+`" alt="image.png"></p><ol start="2"><li>定义函数与调用函数的作用域不同时，会产生闭包。</li></ol><ul><li>返回一个函数，会产生闭包。</li><li>在定时器、事件监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，就会产生闭包。</li></ul><p>当一个函数（外部函数）的返回值是另一个函数（内部函数）时，即使外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，内部函数仍然可以调用这些变量，我们把这些变量的集合称为闭包。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 和上图调用栈相同</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Mozilla&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> displayName<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-闭包的应用" tabindex="-1"><a class="header-anchor" href="#_3-闭包的应用"><span>3. 闭包的应用</span></a></h2><p><a href="https://juejin.cn/post/7264183910597279799?searchId=2024070819041866A6DEB24EF792141D29" target="_blank" rel="noopener noreferrer">闭包的 6 种应用场景</a></p><h3 id="_3-1-异步操作使用闭包" tabindex="-1"><a class="header-anchor" href="#_3-1-异步操作使用闭包"><span>3.1 异步操作使用闭包</span></a></h3><p>在定时器、事件监听、Ajax 请求、Web Workers 或者任何异步中，使用闭包。</p><h3 id="_3-2-使用闭包实现私有属性和方法" tabindex="-1"><a class="header-anchor" href="#_3-2-使用闭包实现私有属性和方法"><span>3.2 使用闭包实现私有属性和方法</span></a></h3><p>节流、防抖、函数柯里化等。</p><h3 id="_3-3-循环中的闭包" tabindex="-1"><a class="header-anchor" href="#_3-3-循环中的闭包"><span>3.3 循环中的闭包</span></a></h3><p>var 声明的变量会被提升至 foo 函数的顶部，回调函数进入事件队列；循环结束，主线程出现空闲时间时，事件队列执行回调函数打印 i，此时 i 已经变为 3，打印三次 3。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for 循环体中变量 i 使用 let 声明，每次 for 循环时，都会创建一个块级作用域，产生不同的执行上下文，各个上下文单独管理自己的变量；打印 i 变量时，变量 i 从三个不同互不影响的闭包中获取。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-创建新对象或类时-方法通常应关联于对象的原型" tabindex="-1"><a class="header-anchor" href="#_3-4-创建新对象或类时-方法通常应关联于对象的原型"><span>3.4 创建新对象或类时，方法通常应关联于对象的原型</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 如果方法定义到对象的构造器中，将导致每次构造器被调用时，方法都会被重新赋值一次。</span></span>
<span class="line">  <span class="token comment">// 会产生闭包</span></span>
<span class="line">  <span class="token comment">// this.getName = function() {</span></span>
<span class="line">  <span class="token comment">// return this.name;</span></span>
<span class="line">  <span class="token comment">// };</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">MyObject</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function m(b,h){const a=i("RouteLink");return o(),e("div",null,[d,t("p",null,[n("要理解闭包，先理解"),l(a,{to:"/interview/JavaScript/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html"},{default:c(()=>[n("词法作用域和作用域链")]),_:1}),n("。JavaScript 使用词法作用域，这意味着函数执行时使用的是定义函数所在的变量作用域。为此，函数内部必须包含对函数定义所在作用域的引用。")]),v])}const g=p(k,[["render",m],["__file","闭包.html.vue"]]),_=JSON.parse('{"path":"/interview/JavaScript/%E9%97%AD%E5%8C%85.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"1. 举个例子理解闭包","slug":"_1-举个例子理解闭包","link":"#_1-举个例子理解闭包","children":[]},{"level":2,"title":"2. 闭包的产生和定义","slug":"_2-闭包的产生和定义","link":"#_2-闭包的产生和定义","children":[]},{"level":2,"title":"3. 闭包的应用","slug":"_3-闭包的应用","link":"#_3-闭包的应用","children":[{"level":3,"title":"3.1 异步操作使用闭包","slug":"_3-1-异步操作使用闭包","link":"#_3-1-异步操作使用闭包","children":[]},{"level":3,"title":"3.2 使用闭包实现私有属性和方法","slug":"_3-2-使用闭包实现私有属性和方法","link":"#_3-2-使用闭包实现私有属性和方法","children":[]},{"level":3,"title":"3.3 循环中的闭包","slug":"_3-3-循环中的闭包","link":"#_3-3-循环中的闭包","children":[]},{"level":3,"title":"3.4 创建新对象或类时，方法通常应关联于对象的原型","slug":"_3-4-创建新对象或类时-方法通常应关联于对象的原型","link":"#_3-4-创建新对象或类时-方法通常应关联于对象的原型","children":[]}]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/JavaScript/闭包.md"}');export{g as comp,_ as data};
