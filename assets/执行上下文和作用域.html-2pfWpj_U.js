import{_ as n,c as s,o as a,e as t}from"./app-CCtMo5dT.js";const p="/front-end-docs/assets/execution-stack-D2wN_26a.png",e="/front-end-docs/assets/context-BXMgKya9.png",l={},c=t(`<h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><ul><li><code>执行上下文</code>：JavaScript 执行一段代码时的运行环境。 <ul><li>分类：执行上下文分为全局执行上下文、函数执行上下文和 eval 函数执行上下文。</li><li>组成：执行上下文由变量环境和词法环境组成。 <ul><li>变量环境和词法环境结构相同，均包含环境记录、outer 指针、this 对象。其中，环境记录存储变量和函数声明。</li></ul></li></ul></li><li><code>执行栈</code>：是一种后进先出的数据结构，用来存储代码运行时的所有执行上下文。</li><li><code>作用域链</code>：当一段代码使用了一个变量，会首先在自身执行上下文中查找该变量，如果没有找到，继续到上一级执行上下文中查找，直到全局执行上下文，这个查找的链条就称为作用域链。</li><li><code>作用域</code>：指一个变量和函数的可访问范围。 <ul><li>JavaScript 采用的静态作用域，又称词法作用域，函数定义的位置决定了函数的作用域，和函数是怎么调用的没有关系。</li></ul></li></ul><h2 id="_1-执行上下文和作用域" tabindex="-1"><a class="header-anchor" href="#_1-执行上下文和作用域"><span>1. 执行上下文和作用域</span></a></h2><p><a href="https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0" target="_blank" rel="noopener noreferrer">Understanding Execution Context and Execution Stack in Javascript</a><br><a href="https://juejin.cn/post/6844903682283143181" target="_blank" rel="noopener noreferrer">[译] 理解 JavaScript 中的执行上下文和执行栈</a></p><h3 id="_1-1-执行上下文的分类" tabindex="-1"><a class="header-anchor" href="#_1-1-执行上下文的分类"><span>1.1 执行上下文的分类</span></a></h3><p>执行上下文是 JavaScript 执行一段代码时的运行环境。有三种执行上下文：</p><ul><li><strong>全局执行上下文：</strong> 任何不在函数内部的代码都在全局上下文中，一个程序中只会有一个全局执行上下文。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。。</li><li><strong>函数执行上下文：</strong> 每当一个函数被调用时, 都会为该函数创建一个新的上下文。</li><li><strong>eval 函数执行上下文：</strong> 执行在 eval 函数内部的代码也会有它属于自己的执行上下文。</li></ul><h3 id="_1-2-执行栈" tabindex="-1"><a class="header-anchor" href="#_1-2-执行栈"><span>1.2 执行栈</span></a></h3><p>执行栈，即调用栈，是一种 LIFO（后进先出）的数据结构，用来存储代码运行时的所有执行上下文。</p><ol><li>当 JS 引擎执行 js 脚本时，会创建一个全局执行上下文，压入当前执行栈；</li><li>每当遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部；</li><li>当该函数执行结束时，执行上下文从栈中弹出，把控制权返回给之前的执行上下文；</li><li>一旦所有代码执行完毕，JS 引擎从当前栈中移除全局执行上下文。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Inside first function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Again inside first function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Inside second function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Inside Global Execution Context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="image.png"></p><h3 id="_1-3-执行上下文的组成" tabindex="-1"><a class="header-anchor" href="#_1-3-执行上下文的组成"><span>1.3 执行上下文的组成</span></a></h3><p>创建执行上下文：</p><ul><li>创建词法环境（LexicalEnvironment）</li><li>创建变量环境（VariableEnvironment）</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">ExecutionContext = {</span>
<span class="line">  LexicalEnvironment = &lt;ref. to LexicalEnvironment in memory&gt;,</span>
<span class="line">  VariableEnvironment = &lt;ref. to VariableEnvironment in  memory&gt;,</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+e+`" width="50%"><p>词法环境是一种保存变量（或函数）名和值的映射关系的键值对。</p><p>词法环境包含 3 个组成部分：</p><ul><li>环境记录：环境记录是词法环境中存储变量和函数声明的地方。 <ul><li>声明性环境记录（Declarative environment record），函数代码的词法环境包含声明性环境记录。存储变量和函数声明，也包含一个 arguments 对象。</li><li>对象环境记录（Object environment record），全局代码的词法环境包含客观环境记录。除了变量和函数声明之外，对象环境记录还存储全局绑定对象（浏览器中的 window 对象）。</li></ul></li><li>outer：指向外部的词法环境</li><li>this</li></ul><p>变量环境也是一种词法环境，也包含词法环境一样的 3 个组成部分。</p><p>在 ES6 中，词法环境用于存储函数声明和 let/const 声明的变量，而变量环境仅用于存储 var 声明的变量。</p><h3 id="_1-4-作用域链" tabindex="-1"><a class="header-anchor" href="#_1-4-作用域链"><span>1.4 作用域链</span></a></h3><p>当一段代码使用了一个变量，会首先在自身执行上下文中查找该变量，如果没有找到，继续到上一级执行上下文中查找，直到全局执行上下文，这个查找的链条就称为作用域链。</p><p>作用域链保存在函数的 <code>[[Scopes]]</code> 属性中。</p><h3 id="_1-5-作用域" tabindex="-1"><a class="header-anchor" href="#_1-5-作用域"><span>1.5 作用域</span></a></h3><p>作用域，指一个变量和函数的可访问范围，即可见性和生命周期。</p><ul><li>全局作用域：存在于全局作用域的变量，可以在任意位置被访问。</li><li>函数作用域：存在于函数最外层的变量，可以在函数内任意位置被访问。</li><li>块级作用域：由最近的一对包含花括号{}界定， let 和 const 声明的变量具有块级作用域。</li></ul><p>JavaScript 采用的静态作用域，又称词法作用域，函数定义的位置决定了函数的作用域，和函数是怎么调用的没有关系。</p><h2 id="_2-var、let-和-const-的区别" tabindex="-1"><a class="header-anchor" href="#_2-var、let-和-const-的区别"><span>2. var、let 和 const 的区别</span></a></h2><h3 id="_2-1-var、let-和-const-的区别" tabindex="-1"><a class="header-anchor" href="#_2-1-var、let-和-const-的区别"><span>2.1 var、let 和 const 的区别</span></a></h3><table><thead><tr><th>var</th><th>let 和 const</th></tr></thead><tbody><tr><td>不存在块级作用域</td><td>具有块级作用域</td></tr><tr><td>存在变量提升，var 声明的变量会给全局对象 window/global 添加属性</td><td>不存在变量提升，在声明之前不可以使用，存在暂时性死区</td></tr><tr><td>重复声明时，后声明的变量会覆盖之前的变量</td><td>不可以重复声明</td></tr><tr><td>声明时，可以不用设置初始值</td><td>let 用来声明变量，const 用于声明常量，必须在声明时进行初始化，且不可更改</td></tr><tr><td>var 声明的内层变量可能覆盖外层变量，用来计数的循环变量泄露为全局变量，循环时产生的闭包可能会出现怪异行为</td><td>const 声明的变量是不允许改变指针的指向，但可以改变指针所指对象的属性值</td></tr></tbody></table><h3 id="_2-2-es5-如何实现-let、const" tabindex="-1"><a class="header-anchor" href="#_2-2-es5-如何实现-let、const"><span>2.2 ES5 如何实现 let、const</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: a is not defined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">_const</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  window<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 能否通过delete删除，能否修改属性特性</span></span>
<span class="line">    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 能否通过for-in返回属性</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;只读变量，不可修改&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">_const</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line"><span class="token keyword">delete</span> a<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 不可枚举，所以不执行</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: 只读变量，不可修改</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-如何使得-const-定义的对象的属性也不能被修改" tabindex="-1"><a class="header-anchor" href="#_2-3-如何使得-const-定义的对象的属性也不能被修改"><span>2.3 如何使得 const 定义的对象的属性也不能被修改？</span></a></h3><ul><li>递归 defineProperty</li><li>Proxy</li></ul><h3 id="_2-4-变量或函数提升" tabindex="-1"><a class="header-anchor" href="#_2-4-变量或函数提升"><span>2.4 变量或函数提升</span></a></h3><p>var 声明或函数声明，会被拿到当前作用域的顶部，位于作用域中所有代码之前，叫做“提升”。</p><ul><li>var 变量被提升后，变量默认值为 undefined；</li><li>函数被提升后，可以在函数声明之前调用；</li><li>如果存在同名的变量和函数，函数声明会覆盖变量声明。</li></ul><p>提升带来的问题：变量容易在不被察觉的情况下被覆盖掉；本应销毁的变量没有被销毁。<br> 解决方案：let 和 const 声明的变量，由于存在“暂时性死区”，不能在声明之前使用。</p><h2 id="_3-代码题" tabindex="-1"><a class="header-anchor" href="#_3-代码题"><span>3. 代码题</span></a></h2><h3 id="_3-1-静态作用域" tabindex="-1"><a class="header-anchor" href="#_3-1-静态作用域"><span>3.1 静态作用域</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token constant">F2</span><span class="token punctuation">(</span><span class="token parameter">f1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token constant">F2</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-函数作用域" tabindex="-1"><a class="header-anchor" href="#_3-2-函数作用域"><span>3.2 函数作用域</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// function</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// function</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: str is not defined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-变量提升" tabindex="-1"><a class="header-anchor" href="#_3-3-变量提升"><span>3.3 变量提升</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;yc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;函数showName被执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数showName被执行</span></span>
<span class="line"><span class="token comment">// undefined</span></span>
<span class="line"><span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ a() {}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),i=[c];function o(u,r){return a(),s("div",null,i)}const k=n(l,[["render",o],["__file","执行上下文和作用域.html.vue"]]),v=JSON.parse('{"path":"/interview/JavaScript/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"1. 执行上下文和作用域","slug":"_1-执行上下文和作用域","link":"#_1-执行上下文和作用域","children":[{"level":3,"title":"1.1 执行上下文的分类","slug":"_1-1-执行上下文的分类","link":"#_1-1-执行上下文的分类","children":[]},{"level":3,"title":"1.2 执行栈","slug":"_1-2-执行栈","link":"#_1-2-执行栈","children":[]},{"level":3,"title":"1.3 执行上下文的组成","slug":"_1-3-执行上下文的组成","link":"#_1-3-执行上下文的组成","children":[]},{"level":3,"title":"1.4 作用域链","slug":"_1-4-作用域链","link":"#_1-4-作用域链","children":[]},{"level":3,"title":"1.5 作用域","slug":"_1-5-作用域","link":"#_1-5-作用域","children":[]}]},{"level":2,"title":"2. var、let 和 const 的区别","slug":"_2-var、let-和-const-的区别","link":"#_2-var、let-和-const-的区别","children":[{"level":3,"title":"2.1 var、let 和 const 的区别","slug":"_2-1-var、let-和-const-的区别","link":"#_2-1-var、let-和-const-的区别","children":[]},{"level":3,"title":"2.2 ES5 如何实现 let、const","slug":"_2-2-es5-如何实现-let、const","link":"#_2-2-es5-如何实现-let、const","children":[]},{"level":3,"title":"2.3 如何使得 const 定义的对象的属性也不能被修改？","slug":"_2-3-如何使得-const-定义的对象的属性也不能被修改","link":"#_2-3-如何使得-const-定义的对象的属性也不能被修改","children":[]},{"level":3,"title":"2.4 变量或函数提升","slug":"_2-4-变量或函数提升","link":"#_2-4-变量或函数提升","children":[]}]},{"level":2,"title":"3. 代码题","slug":"_3-代码题","link":"#_3-代码题","children":[{"level":3,"title":"3.1 静态作用域","slug":"_3-1-静态作用域","link":"#_3-1-静态作用域","children":[]},{"level":3,"title":"3.2 函数作用域","slug":"_3-2-函数作用域","link":"#_3-2-函数作用域","children":[]},{"level":3,"title":"3.3 变量提升","slug":"_3-3-变量提升","link":"#_3-3-变量提升","children":[]}]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/JavaScript/执行上下文和作用域.md"}');export{k as comp,v as data};
