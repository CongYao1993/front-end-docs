import{_ as n,c as s,o as a,e as t}from"./app-CCtMo5dT.js";const e={},o=t(`<h2 id="_1-cookie-sessionstorage-localstorage" tabindex="-1"><a class="header-anchor" href="#_1-cookie-sessionstorage-localstorage"><span>1. Cookie / sessionStorage / localstorage</span></a></h2><table><thead><tr><th><div style="width:100px;"></div></th><th>Cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>使用场景</td><td>用于客户端与服务器之间传递少量信息</td><td>持久化缓存数据，比如页面的默认偏好配置等</td><td>一次性临时数据保存，同一会话的多个页面传递数据</td></tr><tr><td>生命周期</td><td>默认关闭标签或浏览器后删除；可以设置 Expires 或 Max-Age 指定的一段时间后被删除</td><td>长期保留，除非被清除</td><td>仅在当前会话下有效，关闭标签或浏览器后被清除</td></tr><tr><td>作用域</td><td>同源或者包含子域名</td><td>同源，子域无法继承父域的 localStorage</td><td>不能在多个窗口或标签页之间共享数据，但是同一个会话的新页面（通过 window.open 或链接打开新页面）会复制前一页 sessionStorage</td></tr><tr><td>存放数据大小</td><td>4KB</td><td>5MB</td><td>5MB</td></tr><tr><td>存放位置</td><td>浏览器/服务端</td><td>浏览器</td><td>浏览器</td></tr></tbody></table><h3 id="_1-1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-1-cookie"><span>1.1 Cookie</span></a></h3><p>Cookie 是服务器发送到浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时，携带在 HTTP 头部并发送到服务器上。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">响应头部：Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</span>
<span class="line">请求头部：Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly; SameSite=Strict</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Domain</code>：指定了哪些主机可以接受 Cookie。如果不指定，该属性默认为同一主机设置 Cookie，不包含子域名。如果指定了 Domain，则一般包含子域名。</li><li><code>Path</code>：设置 Cookie 的生效路径，子路径也会被匹配。Path=/;表示该域名下所有路径都会被匹配。</li><li><code>Secure</code>：cookie 只通过 https 协议传输，可以预防中间人攻击。</li><li><code>HttpOnly</code>：阻止通过 JavaScript document.cookie 访问 cookie，从而一定程度上遏制 XSS 攻击等。</li><li><code>SameSite</code>：允许服务器要求某个 cookie 在跨站请求时不会被发送，从而可以阻止 CSRF 攻击。</li></ul><p>原生的 Cookie 接口不友好，可以用 js-cookie 插件。</p><h3 id="_1-2-web-storage" tabindex="-1"><a class="header-anchor" href="#_1-2-web-storage"><span>1.2 Web Storage</span></a></h3><p>Web Storage 定义了两个对象: localStorage 和 sessionStorage。前者是永久存储机制,而后者是跨会话的存储机制。</p><ul><li>localStorage 在 iOS Safari、chrome 和 UC 浏览器中的隐私模式（也叫无痕模式）下无法使用</li><li>页面间传参，通过 url 或者 pushState 的 state 更好</li></ul><p><strong>如何设置 localstorage 过期时间？</strong></p><p>localstorage 原生是不支持设置过期时间，只能自己来封装一层逻辑来实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> curtime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前时间</span></span>
<span class="line">  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">val</span><span class="token operator">:</span> value<span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> curtime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成json字符串序列</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> exp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// exp是设置的过期时间</span></span>
<span class="line">  <span class="token keyword">var</span> val <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取存储的元素</span></span>
<span class="line">  <span class="token keyword">var</span> dataobj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析出json对象</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataobj<span class="token punctuation">.</span>time <span class="token operator">&gt;</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果当前时间-减去存储的元素在创建时候设置的时间 &gt; 过期时间</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;expires&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//提示过期</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;val=&quot;</span> <span class="token operator">+</span> dataobj<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-进程和线程" tabindex="-1"><a class="header-anchor" href="#_2-进程和线程"><span>2. 进程和线程</span></a></h2><p>一个进程是一个程序的运行实例。启动一个程序时，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程.</p><ul><li>进程是 CPU 资源分配的最小单位，每一个进程都有一个自己的内存空间。</li><li>当一个进程关闭之后，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收；</li><li>进程之间的内容相互隔离。一个进程不会影响到其他进程的。</li></ul><p>线程是依附于进程执行的，为了提高进程的执行效率。</p><ul><li>线程是 CPU 调度的最小单位；</li><li>线程之间共享进程中的数据等所有资源；</li><li>进程中的任意线程执行出错，都会导致整个进程的崩溃。</li></ul><h2 id="_3-2、tcp-和-udp-的区别" tabindex="-1"><a class="header-anchor" href="#_3-2、tcp-和-udp-的区别"><span>3. 2、TCP 和 UDP 的区别</span></a></h2><p>TCP 和 UDP 均为传输层协议，传输层提供主机到主机的通信能力。</p><ul><li>是否需要建立连接 <ul><li>TCP 是面向连接的，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li><li>UDP 是无连接的，即发送数据前不需要建立连接。</li></ul></li><li>可靠性 <ul><li>TCP 提供可靠的服务，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达。</li><li>UDP 尽最大努力交付，不保证可靠交付。</li></ul></li><li>是否支持多对多通信 <ul><li>TCP 连接只能是点到点、一对一的，不提供广播或多播服务。</li><li>UDP 支持一对一，一对多，多对一和多对多的交互通信。</li></ul></li><li>拥塞控制 <ul><li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。</li><li>UDP 没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。</li></ul></li><li>是否分片 <ul><li>TCP 的数据大小如果大于最大报文长度，则会进行分片，目标主机收到后，组装 TCP 数据包。</li><li>UDP 是面向报文的。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，在添加首部后就向下交付 IP 层。UDP 一次交付一个完整的报文。因此，应用程序必须选择合话大小的报文。</li></ul></li></ul><p>应用：</p><ul><li>TCP 应用于对可靠性要求较高的场景，如：FTP 文件传输，HTTP/HTTPS 接口调用等</li><li>UDP 应用于对实时性要求高的场景，如：在线音视频，广播通信，包总量较少的通信，如 DNS、SNMP 等</li></ul>`,23),l=[o];function p(i,c){return a(),s("div",null,l)}const r=n(e,[["render",p],["__file","浏览器与网络.html.vue"]]),d=JSON.parse('{"path":"/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. Cookie / sessionStorage / localstorage","slug":"_1-cookie-sessionstorage-localstorage","link":"#_1-cookie-sessionstorage-localstorage","children":[{"level":3,"title":"1.1 Cookie","slug":"_1-1-cookie","link":"#_1-1-cookie","children":[]},{"level":3,"title":"1.2 Web Storage","slug":"_1-2-web-storage","link":"#_1-2-web-storage","children":[]}]},{"level":2,"title":"2. 进程和线程","slug":"_2-进程和线程","link":"#_2-进程和线程","children":[]},{"level":2,"title":"3. 2、TCP 和 UDP 的区别","slug":"_3-2、tcp-和-udp-的区别","link":"#_3-2、tcp-和-udp-的区别","children":[]}],"git":{"updatedTime":1723989556000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"interview/浏览器与计算机网络/浏览器与网络.md"}');export{r as comp,d as data};
